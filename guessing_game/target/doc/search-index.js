var searchIndex = JSON.parse('{\
"cfg_if":{"doc":"A macro for defining <code>#[cfg]</code> if-else statements.","t":"O","n":["cfg_if"],"q":[[0,"cfg_if"]],"d":["The main macro provided by this crate. See crate …"],"i":[0],"f":[0],"c":[],"p":[]},\
"getrandom":{"doc":"Interface to the random number generator of the operating …","t":"SDSSSLLLLLLLLLLLLFLLLLLLL","n":["CUSTOM_START","Error","INTERNAL_START","UNAVAILABLE","UNKNOWN","borrow","borrow_mut","clone","clone_into","code","eq","equivalent","fmt","fmt","from","from","from","getrandom","into","raw_os_error","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"getrandom"]],"d":["Codes at or above this point can be used by users to …","A small and <code>no_std</code> compatible error type.","Codes below this point represent OS Errors (i.e. positive …","System entropy source is unavailable.","Unknown error.","","","","","Extract the bare error code.","","","","","","","Returns the argument unchanged.","Fill <code>dest</code> with random bytes from the system’s preferred …","Calls <code>U::from(self)</code>.","Extract the raw OS error code (if this error came from the …","","","","",""],"i":[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1],"f":[0,0,0,0,0,[[]],[[]],[1,1],[[]],[1,2],[[1,1],3],[[],3],[[1,4],5],[[1,4],5],[6,1],[2,1],[[]],[[[8,[7]]],[[9,[1]]]],[[]],[1,[[11,[10]]]],[[]],[[],12],[[],9],[[],9],[[],13]],"c":[3,4],"p":[[3,"Error"],[3,"NonZeroU32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[15,"u8"],[15,"slice"],[4,"Result"],[15,"i32"],[4,"Option"],[3,"String"],[3,"TypeId"]]},\
"guessing_game":{"doc":"","t":"F","n":["main"],"q":[[0,"guessing_game"]],"d":[""],"i":[0],"f":[[[]]],"c":[],"p":[]},\
"ppv_lite86":{"doc":"","t":"IIIIIIIIIIQIIIIIIIIIIIIIKKOOOKKKKKKLLLLKKKKKKKKKKKKKKKKKKKKKKKKKIQIQIQIQIQIQIQIQIQIQKLLKKKLLCCCKKKAGGDDDDDDGGGDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLTTTLLLLLLLLLLLLLLL","n":["AndNot","ArithOps","BSwap","BitOps0","BitOps128","BitOps32","BitOps64","LaneWords4","Machine","MultiLane","Output","RotateEachWord128","RotateEachWord32","RotateEachWord64","Store","StoreBytes","Swap64","UnsafeFrom","VZip","Vec2","Vec4","Vec4Ext","Vector","Words4","andnot","bswap","dispatch","dispatch_light128","dispatch_light256","extract","extract","from_lanes","insert","insert","instance","read_be","read_be","read_le","read_le","rotate_each_word_right11","rotate_each_word_right12","rotate_each_word_right16","rotate_each_word_right20","rotate_each_word_right24","rotate_each_word_right25","rotate_each_word_right32","rotate_each_word_right7","rotate_each_word_right8","shuffle1230","shuffle2301","shuffle3012","shuffle_lane_words1230","shuffle_lane_words2301","shuffle_lane_words3012","swap1","swap16","swap2","swap32","swap4","swap64","swap8","to_lanes","to_scalars","transpose4","u128x1","u128x1","u128x2","u128x2","u128x4","u128x4","u32x4","u32x4","u32x4x2","u32x4x2","u32x4x4","u32x4x4","u64x2","u64x2","u64x2x2","u64x2x2","u64x2x4","u64x2x4","u64x4","u64x4","unpack","unpack","unpack","unsafe_from","unsafe_read_be","unsafe_read_le","vec","vec","vec128_storage","vec256_storage","vec512_storage","vzip","write_be","write_le","x86_64","AVX","AVX2","Avx2Machine","NoA1","NoA2","NoNI","NoS3","NoS4","SSE2","SSE41","SSSE3","SseMachine","YesA1","YesA2","YesNI","YesS3","YesS4","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","instance","instance","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","new128","new128","split128","split128","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unpack","vec128_storage","vec256_storage","vec512_storage","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"ppv_lite86"],[99,"ppv_lite86::x86_64"]],"d":["","Ops that depend on word size","","Ops that are independent of word size and endian","","","","A vector composed one or more lanes each composed of four …","","A vector composed of multiple 128-bit lanes.","","","","","","","Exchange neigboring ranges of bits of the specified size","","Combine single vectors into a multi-lane vector.","A vector composed of two elements, which may be words or …","A vector composed of four elements, which may be words or …","Vec4 functions which may not be implemented yet for all …","","A vector composed of four words; depending on their size, …","","","Generate the full set of optimized implementations to take …","Generate only the basic implementations necessary to be …","Generate only the basic implementations necessary to be …","","","Build a multi-lane vector from individual lanes.","","","Safety","","","","","","","","","","","","","","","","","","","","","","","","","","","Split a multi-lane vector into single-lane vectors.","","","","","","","","","","","","","","","","","","","","","","","Safety","","","","Safety","Safety","","","","","","","","","","AVX but not AVX2: only 128-bit integer operations, but use …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generic wrapper for unparameterized storage of any of the …","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,30,31,0,0,0,32,33,7,32,33,34,34,34,34,34,35,35,35,35,35,35,36,35,35,37,37,37,38,38,38,39,39,39,39,39,39,39,7,40,41,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,0,34,6,34,34,42,4,4,34,34,0,0,0,43,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,21,22,23,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,21,22,22,23,19,20,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,22,23,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23,21,0,0,0,8,9,10,11,12,13,14,15,16,17,19,20,21,22,23],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],0,0,0,[1],[1],[[]],[1],[1],[[]],[[[3,[2]]],4],[[[3,[2]]],4],[[[3,[2]]],4],[[[3,[2]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[5,5,5,5]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[],6],[[],6],[[]],[[[3,[2]]]],[[[3,[2]]]],[[],7],[[],7],0,0,0,[[]],[[[3,[2]]]],[[[3,[2]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[[[19,[18,18,18]]],[[19,[18,18,18]]]],[[[20,[18]]],[[20,[18]]]],[21,21],[22,22],[23,23],[[],21],[[],22],[[],23],[[21,21],24],[[22,22],24],[[23,23],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[1]]],21],[[]],[[]],[[[25,[26]]],22],[[]],[[],[[19,[27,27,27]]]],[[],[[20,[27]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[25,[21]]],22],[[[25,[21]]],23],[22,[[25,[21]]]],[23,[[25,[21]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[21,21],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[15,"u32"],[15,"u8"],[15,"slice"],[8,"StoreBytes"],[8,"Sized"],[8,"Store"],[8,"MultiLane"],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[8,"Clone"],[3,"SseMachine"],[3,"Avx2Machine"],[19,"vec128_storage"],[19,"vec256_storage"],[19,"vec512_storage"],[15,"bool"],[15,"array"],[15,"u64"],[8,"Copy"],[4,"Result"],[3,"TypeId"],[8,"AndNot"],[8,"BSwap"],[8,"Vec2"],[8,"Vec4"],[8,"Machine"],[8,"RotateEachWord32"],[8,"RotateEachWord64"],[8,"Words4"],[8,"LaneWords4"],[8,"Swap64"],[8,"Vector"],[8,"Vec4Ext"],[8,"UnsafeFrom"],[8,"VZip"]]},\
"rand":{"doc":"Utilities for random number generation","t":"ISIDSIIQIKLLLALKLLLLLLLKLLLLLLLKKAFLLALLLALLFKLLKLLLLDDEDDDDDDIDDDDNDDDDDDDDDDDDDDCCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLAIIQDDDDIQKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNNEDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLSIDSLLLLLLLLLLLLKLLLCCCCCCCCCCCDDDDALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLLQIDILLKLKLLKKKLLALLLLKKLLLLLEEELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLL","n":["AsByteSliceMut","CUSTOM_START","CryptoRng","Error","INTERNAL_START","Rng","RngCore","Seed","SeedableRng","as_byte_slice_mut","borrow","borrow_mut","code","distributions","fill","fill_bytes","fmt","fmt","from","from","from","from_entropy","from_rng","from_seed","gen","gen_bool","gen_range","gen_ratio","inner","into","new","next_u32","next_u64","prelude","random","raw_os_error","read","rngs","sample","sample_iter","seed_from_u64","seq","source","take_inner","thread_rng","to_le","to_string","try_fill","try_fill_bytes","try_from","try_into","type_id","vzip","Alphanumeric","Bernoulli","BernoulliError","Beta","Binomial","Cauchy","ChiSquared","Dirichlet","DistIter","Distribution","Exp","Exp1","FisherF","Gamma","InvalidProbability","LogNormal","Normal","Open01","OpenClosed01","Pareto","Poisson","Standard","StandardNormal","StudentT","Triangular","Uniform","UnitCircle","UnitSphereSurface","Weibull","WeightedError","WeightedIndex","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_ratio","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_with_param","next","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_iter","size_hint","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uniform","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","weighted","SampleBorrow","SampleUniform","Sampler","Uniform","UniformDuration","UniformFloat","UniformInt","UniformSampler","X","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","fmt","fmt","fmt","from","from","from","into","into","into","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","new_inclusive","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","sample_single","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AllWeightsZero","InvalidWeight","NoItem","TooMany","WeightedError","WeightedIndex","alias_method","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","from","from","into","into","new","sample","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","update_weights","vzip","vzip","MAX","Weight","WeightedIndex","ZERO","borrow","borrow_mut","clone","clone_into","fmt","from","into","new","sample","sum","to_owned","try_from","try_from_u32_lossy","try_into","type_id","vzip","CryptoRng","Distribution","IteratorRandom","Rng","RngCore","SeedableRng","SliceRandom","StdRng","ThreadRng","random","thread_rng","EntropyRng","OsRng","StdRng","ThreadRng","adapter","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","default","default","default","fill_bytes","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","from","from_rng","from_seed","into","into","into","into","mock","new","next_u32","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","next_u64","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","ReadError","ReadRng","ReseedingRng","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","from","from","from","into","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reseed","source","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","StepRng","borrow","borrow_mut","clone","clone_into","fill_bytes","fmt","from","into","new","next_u32","next_u64","to_owned","try_fill_bytes","try_from","try_into","type_id","vzip","Item","IteratorRandom","SliceChooseIter","SliceRandom","borrow","borrow_mut","choose","choose","choose_multiple","choose_multiple","choose_multiple_fill","choose_mut","choose_weighted","choose_weighted_mut","fmt","from","index","into","into_iter","len","next","partial_shuffle","shuffle","size_hint","try_from","try_into","type_id","vzip","IndexVec","IndexVecIntoIter","IndexVecIter","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","fmt","from","from","from","from","from","index","into","into","into","into_iter","into_iter","into_iter","into_vec","is_empty","iter","len","next","next","sample","size_hint","size_hint","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"rand"],[53,"rand::distributions"],[531,"rand::distributions::uniform"],[642,"rand::distributions::weighted"],[680,"rand::distributions::weighted::alias_method"],[700,"rand::prelude"],[711,"rand::rngs"],[784,"rand::rngs::adapter"],[831,"rand::rngs::mock"],[849,"rand::seq"],[877,"rand::seq::index"]],"d":["Trait for casting types to byte slices","Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","An automatically-implemented extension trait on <code>RngCore</code> …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","Return a mutable reference to self as a byte slice","","","Retrieve the error code, if any.","Generating random samples from probability distributions","Fill <code>dest</code> entirely with random bytes (uniform value …","Fill <code>dest</code> with random data.","","","","Returns the argument unchanged.","","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Return a random value supporting the <code>Standard</code> distribution.","Return a bool with a probability <code>p</code> of being true.","Generate a random value in the range [<code>low</code>, <code>high</code>), i.e. …","Return a bool with a probability of <code>numerator/denominator</code> …","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","Return the next random <code>u64</code>.","Convenience re-export of common members","Generates a random value using the thread-local random …","Extract the raw OS error code (if this error came from the …","","Random number generators and adapters","Sample a new value, using the given distribution.","Create an iterator that generates values using the given …","Create a new PRNG using a <code>u64</code> seed.","Sequence-related functionality","","Unwrap the inner error (<code>std</code> only)","Retrieve the lazily-initialized thread-local random number …","Call <code>to_le</code> on each element (i.e. byte-swap on Big Endian …","","Fill <code>dest</code> entirely with random bytes (uniform value …","Fill <code>dest</code> entirely with random data.","","","","","Sample a <code>char</code>, uniformly distributed over ASCII letters …","The Bernoulli distribution.","Error type returned from <code>Bernoulli::new</code>.","The Beta distribution with shape parameters <code>alpha</code> and <code>beta</code>.","The binomial distribution <code>Binomial(n, p)</code>.","The Cauchy distribution <code>Cauchy(median, scale)</code>.","The chi-squared distribution <code>χ²(k)</code>, where <code>k</code> is the …","The dirichelet distribution <code>Dirichlet(alpha)</code>.","An iterator that generates random values of <code>T</code> with …","Types (distributions) that can be used to create a random …","The exponential distribution <code>Exp(lambda)</code>.","Samples floating-point numbers according to the …","The Fisher F distribution <code>F(m, n)</code>.","The Gamma distribution <code>Gamma(shape, scale)</code> distribution.","<code>p &lt; 0</code> or <code>p &gt; 1</code>.","The log-normal distribution <code>ln N(mean, std_dev**2)</code>.","The normal distribution <code>N(mean, std_dev**2)</code>.","A distribution to sample floating point numbers uniformly …","A distribution to sample floating point numbers uniformly …","Samples floating-point numbers according to the Pareto …","The Poisson distribution <code>Poisson(lambda)</code>.","A generic random value distribution, implemented for many …","Samples floating-point numbers according to the normal …","The Student t distribution, <code>t(nu)</code>, where <code>nu</code> is the degrees …","The triangular distribution.","Sample values uniformly between two bounds.","Samples uniformly from the edge of the unit circle in two …","Samples uniformly from the surface of the unit sphere in …","Samples floating-point numbers according to the Weibull …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Construct a new <code>Bernoulli</code> with the probability of success …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Construct a new <code>Bernoulli</code> with the given probability of …","Construct a new <code>Binomial</code> with the given shape parameters <code>n</code> …","Construct a new <code>Cauchy</code> with the given shape parameters …","Construct a new <code>Dirichlet</code> with the given alpha parameter …","Construct a new <code>Exp</code> with the given shape parameter <code>lambda</code>. …","Construct an object representing the <code>Gamma(shape, scale)</code> …","Create a new chi-squared distribution with …","Create a new <code>FisherF</code> distribution, with the given …","Create a new Student t distribution with <code>n</code> degrees of …","Construct an object representing the <code>Beta(alpha, beta)</code> …","Construct a new <code>Normal</code> distribution with the given mean and","Construct a new <code>LogNormal</code> distribution with the given mean …","Construct a new Pareto distribution with given <code>scale</code> and …","Construct a new <code>Poisson</code> with the given shape parameter …","Construct a new <code>Triangular</code> with minimum <code>min</code>, maximum <code>max</code> …","Construct a new <code>UnitCircle</code> distribution.","Construct a new <code>UnitSphereSurface</code> distribution.","Construct a new <code>Weibull</code> distribution with given <code>scale</code> and …","Construct a new <code>Dirichlet</code> with the given shape parameter …","","Generate a random value of <code>T</code>, using <code>rng</code> as the source of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an iterator that generates random values of <code>T</code>, …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A distribution uniformly sampling numbers within a given …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Weighted index sampling","Helper trait similar to <code>Borrow</code> but implemented only for …","Helper trait for creating objects using the correct …","The <code>UniformSampler</code> implementation supporting type <code>X</code>.","Sample values uniformly between two bounds.","The back-end implementing <code>UniformSampler</code> for <code>Duration</code>.","The back-end implementing <code>UniformSampler</code> for …","The back-end implementing <code>UniformSampler</code> for integer types.","Helper trait handling actual uniform sampling.","The type sampled by this implementation.","Immutably borrows from an owned value. See <code>Borrow::borrow</code>","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Construct self, with inclusive lower bound and exclusive …","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","Construct self, with inclusive bounds <code>[low, high]</code>.","Create a new <code>Uniform</code> instance which samples uniformly from …","","","","","","","","","","","","","","","","Sample a value.","","","","","","","","","","","","","","","","Sample a single value uniformly from a range with …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All items in the provided weight collection are zero.","A weight is either less than zero, greater than the …","The provided weight collection contains no items.","Too many weights are provided (length greater than <code>u32::MAX</code>…","Error type returned from <code>WeightedIndex::new</code>.","A distribution using weighted sampling to pick a …","This module contains an implementation of alias method for …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new a <code>WeightedIndex</code> <code>Distribution</code> using the values","","","","","","","","","","","Update a subset of weights, without changing the number of …","","","Maximum number representable by <code>Self</code>.","Trait that must be implemented for weights, that are used …","A distribution using weighted sampling to pick a …","Element of <code>Self</code> equivalent to 0.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new <code>WeightedIndex</code>.","","Sums all values in slice <code>values</code>.","","","Produce an instance of <code>Self</code> from a <code>u32</code> value, or return …","","","","","","","","","","","","","","","An interface returning random data from external …","A random number generator that retrieves randomness from …","The standard RNG. The PRNG algorithm in <code>StdRng</code> is chosen …","The type returned by <code>thread_rng</code>, essentially just a …","Wrappers / adapters forming RNGs","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Mock random number generator","Create a new <code>EntropyRng</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>ReadRng</code> error type","An RNG that reads random bytes straight from any type …","A wrapper around any PRNG that implements <code>BlockRngCore</code>, …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>ReadRng</code> from a <code>Read</code>.","Create a new <code>ReseedingRng</code> from an existing PRNG, combined …","","","","","Reseed the internal PRNG.","","","","","","","","","","","","","","","","","","A simple implementation of <code>RngCore</code> for testing purposes.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a <code>StepRng</code>, yielding an arithmetic sequence starting …","","","","","","","","","The element type.","Extension trait on iterators, providing random sampling …","An iterator over multiple slice elements.","Extension trait on slices, providing random mutation and …","","","Returns a reference to one random element of the slice, or …","Choose one element at random from the iterator.","Chooses <code>amount</code> elements from the slice at random, without …","Collects <code>amount</code> values at random from the iterator into a …","Collects values at random from the iterator into a …","Returns a mutable reference to one random element of the …","Similar to <code>choose</code>, but where the likelihood of each …","Similar to <code>choose_mut</code>, but where the likelihood of each …","","Returns the argument unchanged.","Low-level API for sampling indices","Calls <code>U::from(self)</code>.","","","","Shuffle a slice in place, but exit early.","Shuffle a mutable slice in place.","","","","","","A vector of indices.","Return type of <code>IndexVec::into_iter</code>.","Return type of <code>IndexVec::iter</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the value at the given <code>index</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert into an iterator over the indices as a sequence of …","","","Return result as a <code>Vec&lt;usize&gt;</code>. Conversion may or may not …","Returns <code>true</code> if the length is 0.","Iterate over the indices as a sequence of <code>usize</code> values","Returns the number of indices","","","Randomly sample exactly <code>amount</code> distinct indices from …","","","","","","","","","","","","","","","",""],"i":[0,3,0,0,3,0,0,97,0,6,3,3,3,0,63,12,3,3,3,3,3,97,97,97,63,63,63,63,3,3,3,12,12,0,0,3,12,0,63,63,97,0,3,3,0,6,3,63,12,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,32,32,31,32,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,50,50,51,52,53,54,55,59,27,56,31,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,27,31,33,34,35,37,38,39,40,41,42,44,45,46,47,48,51,52,53,35,27,26,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,54,55,55,59,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,26,27,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,32,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,0,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,59,27,56,0,0,0,15,0,0,0,0,0,109,16,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,109,50,80,80,80,80,80,80,80,80,80,80,80,80,81,81,82,109,50,80,80,80,80,80,80,80,80,80,80,80,80,81,81,82,109,80,80,80,80,80,80,80,80,80,80,80,80,81,81,82,109,80,80,80,80,80,80,80,80,80,80,80,80,81,81,80,81,82,80,81,82,80,81,82,80,81,82,80,81,82,86,86,86,86,0,0,0,85,86,85,86,85,86,85,86,86,86,85,86,86,85,86,85,86,85,85,85,86,86,85,86,85,86,85,86,85,85,86,91,0,0,91,92,92,92,92,92,92,92,92,92,91,92,92,91,92,92,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,95,94,28,93,95,94,28,93,94,28,93,94,28,93,95,28,93,95,94,28,93,95,94,28,93,95,94,28,94,94,93,95,94,28,0,95,93,95,94,28,93,95,94,28,93,94,28,93,95,94,28,93,95,94,28,93,95,94,28,93,95,94,28,93,95,94,28,0,0,0,100,101,98,100,101,98,98,98,100,98,100,101,101,98,100,101,98,100,101,98,100,98,100,98,100,98,98,101,98,101,100,98,100,101,98,100,101,98,100,101,98,100,101,98,0,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,110,0,0,0,103,103,110,111,110,111,111,110,110,110,103,103,0,103,103,103,103,110,110,103,103,103,103,103,0,0,0,106,108,107,106,108,107,106,107,106,107,106,106,108,107,106,106,106,108,107,106,106,108,107,106,108,107,106,106,106,106,108,107,0,108,107,106,107,106,108,107,106,108,107,106,108,107,106,108,107],"f":[0,0,0,0,0,0,0,0,0,[[],[[2,[1]]]],[[]],[[]],[3,[[5,[4]]]],0,[[[0,[6,7]]]],[[[2,[1]]]],[[3,8],[[10,[9]]]],[[3,8],[[10,[9]]]],[4,3],[[]],[11,3],[[]],[12,[[10,[3]]]],[[]],[[]],[13,14],[[[0,[[16,[15]],7]],[0,[[16,[15]],7]]],15],[[17,17],14],[3,18],[[]],[[[21,[[20,[18,19]]]]],3],[[],17],[[],22],0,[[]],[3,[[5,[23]]]],[[12,[2,[1]]],[[10,[24,25]]]],0,[26],[[7,26],[[27,[26,7]]]],[22],0,[3,[[5,[18]]]],[3,[[20,[18,19]]]],[[],28],[[]],[[],29],[[[0,[6,7]]],[[10,[3]]]],[[[2,[1]]],[[10,[3]]]],[[],10],[[],10],[[],30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[32,32],[33,33],[34,34],[35,35],[36,36],[37,37],[38,38],[39,39],[40,40],[41,41],[42,42],[43,43],[44,44],[45,45],[46,46],[47,47],[48,48],[[[50,[[0,[49,15]]]]],[[50,[[0,[49,15]]]]]],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,32],14],[[],14],[[31,8],57],[[32,8],57],[[32,8],57],[[33,8],57],[[34,8],57],[[35,8],57],[[36,8],57],[[37,8],57],[[38,8],57],[[39,8],57],[[40,8],57],[[41,8],57],[[42,8],57],[[43,8],57],[[44,8],57],[[45,8],57],[[46,8],57],[[47,8],57],[[48,8],57],[[[50,[[0,[58,15]]]],8],57],[[51,8],57],[[52,8],57],[[53,8],57],[[54,8],57],[[55,8],57],[[59,8],57],[[[27,[58,58,58]],8],57],[[56,8],57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[60,[15]]],[[50,[15]]]],[[[61,[15]]],[[50,[15]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[17,17],[[10,[31,32]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[13,[[10,[31,32]]]],[[22,13],33],[[13,13],34],[[[21,[[62,[13]]]]],35],[13,37],[[13,13],38],[13,39],[[13,13],40],[13,41],[[13,13],42],[[13,13],44],[[13,13],45],[[13,13],46],[13,47],[[13,13,13],48],[[],51],[[],52],[[13,13],53],[[13,24],35],[[[27,[26,63]]],5],[[[0,[63,7]]]],[[31,[0,[63,7]]],14],[[33,[0,[63,7]]],22],[[34,[0,[63,7]]],13],[[35,[0,[63,7]]],[[62,[13]]]],[[36,[0,[63,7]]],13],[[37,[0,[63,7]]],13],[[38,[0,[63,7]]],13],[[39,[0,[63,7]]],13],[[40,[0,[63,7]]],13],[[41,[0,[63,7]]],13],[[42,[0,[63,7]]],13],[[43,[0,[63,7]]],13],[[44,[0,[63,7]]],13],[[45,[0,[63,7]]],13],[[46,[0,[63,7]]],13],[[47,[0,[63,7]]],22],[[48,[0,[63,7]]],13],[[[50,[15]],[0,[63,7]]],15],[[51,[0,[63,7]]],[[64,[13]]]],[[52,[0,[63,7]]],[[64,[13]]]],[[53,[0,[63,7]]],13],[[54,[0,[63,7]]],13],[[54,[0,[63,7]]],65],[[55,[0,[63,7]]],13],[[55,[0,[63,7]]],65],[[59,[0,[63,7]]],66],[[56,[0,[63,7]]],67],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],68],[[56,[0,[63,7]]],23],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],66],[[56,[0,[63,7]]]],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],4],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],65],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],69],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],70],[[56,[0,[63,7]]],71],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],22],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],72],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],73],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],74],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],17],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],1],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],24],[[56,[0,[63,7]]],75],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],76],[[56,[0,[63,7]]],77],[[56,[0,[63,7]]],5],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],13],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],78],[[56,[0,[63,7]]],79],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],14],[[56,[0,[63,7]]]],[[56,[0,[63,7]]],64],[[56,[0,[63,7]]],64],[[7,63],[[27,[7,63]]]],[[[27,[26,63]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[80,[49]]],[[80,[49]]]],[[[81,[49]]],[[81,[49]]]],[82,82],[[]],[[]],[[]],[[[80,[58]],8],57],[[[81,[58]],8],57],[[82,8],57],[[]],[[]],[[]],[[]],[[]],[[]],[[[0,[16,7]],[0,[16,7]]]],[[[0,[[16,[15]],7]],[0,[[16,[15]],7]]],[[50,[15]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[73]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[75]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[24]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[1]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[78]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[79]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[22]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[71]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[70]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[23]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[17]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[68]]]],[[[0,[16,7]],[0,[16,7]]],[[81,[13]]]],[[[0,[16,7]],[0,[16,7]]],[[81,[65]]]],[[[0,[16,7]],[0,[16,7]]],82],[[[0,[16,7]],[0,[16,7]]]],[[[0,[[16,[15]],7]],[0,[[16,[15]],7]]],[[50,[15]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[68]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[73]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[17]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[71]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[70]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[78]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[79]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[23]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[1]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[22]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[75]]]],[[[0,[16,7]],[0,[16,7]]],[[80,[24]]]],[[[0,[16,7]],[0,[16,7]]],[[81,[13]]]],[[[0,[16,7]],[0,[16,7]]],[[81,[65]]]],[[[0,[16,7]],[0,[16,7]]],82],[[[0,[63,7]]]],[[[80,[1]],[0,[63,7]]]],[[[80,[75]],[0,[63,7]]]],[[[80,[24]],[0,[63,7]]]],[[[80,[22]],[0,[63,7]]]],[[[80,[23]],[0,[63,7]]]],[[[80,[73]],[0,[63,7]]]],[[[80,[70]],[0,[63,7]]]],[[[80,[68]],[0,[63,7]]]],[[[80,[71]],[0,[63,7]]]],[[[80,[78]],[0,[63,7]]]],[[[80,[79]],[0,[63,7]]]],[[[80,[17]],[0,[63,7]]]],[[[81,[13]],[0,[63,7]]]],[[[81,[65]],[0,[63,7]]]],[[82,[0,[63,7]]],83],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[[0,[16,7]],[0,[16,7]],[0,[63,7]]]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[[85,[[0,[49,15,84]]]]],[[85,[[0,[49,15,84]]]]]],[86,86],[[]],[[]],[[86,86],14],[[],14],[[[85,[[0,[58,15,84]]]],8],57],[[86,8],57],[[86,8],57],[[]],[[]],[[]],[[]],[87,[[10,[[85,[[0,[[88,[[0,[[88,[[0,[[88,[[0,[88,49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],86]]]],[[[85,[[0,[15,84]]]],[0,[63,7]]],24],[[]],[[]],[[],29],[[],10],[[],10],[[],10],[[],10],[[],30],[[],30],[[[85,[[0,[[88,[[0,[[88,[[0,[[88,[[0,[88,90,49,89]],[0,[15,84]]]],[90,[[0,[88,90,49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],[90,[[0,[[88,[[0,[88,90,49,89]],[0,[15,84]]]],[90,[[0,[88,90,49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],[90,[[0,[[88,[[0,[[88,[[0,[88,90,49,89]],[0,[15,84]]]],[90,[[0,[88,90,49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],[90,[[0,[[88,[[0,[88,90,49,89]],[0,[15,84]]]],[90,[[0,[88,90,49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],49,89]],[0,[15,84]]]],2],[[10,[86]]]],[[]],[[]],0,0,0,0,[[]],[[]],[[[92,[91]]],[[92,[91]]]],[[]],[[[92,[[0,[58,91]]]],8],57],[[]],[[]],[[[62,[91]]],[[10,[[92,[91]],86]]]],[[[92,[91]],[0,[63,7]]],24],[2],[[]],[[],10],[17,5],[[],10],[[],30],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[93,93],[94,94],[28,28],[[]],[[]],[[]],[[],93],[[],95],[[],28],[[93,[2,[1]]]],[[95,[2,[1]]]],[[94,[2,[1]]]],[[28,[2,[1]]]],[[93,8],[[10,[9]]]],[[95,8],57],[[94,8],57],[[28,8],57],[[]],[[]],[[]],[[]],[12,[[10,[94,3]]]],[[],94],[[]],[[]],[[]],[[]],0,[[],95],[93,17],[95,17],[94,17],[28,17],[93,22],[95,22],[94,22],[28,22],[[]],[[]],[[]],[[93,[2,[1]]],[[10,[3]]]],[[95,[2,[1]]],[[10,[3]]]],[[94,[2,[1]]],[[10,[3]]]],[[28,[2,[1]]],[[10,[3]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],30],[[],30],[[],30],[[],30],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[98,[[0,[96,97,49]],[0,[12,49]]]]],[[98,[[0,[96,97,49]],[0,[12,49]]]]]],[[]],[[[100,[99]],[2,[1]]]],[[[98,[[0,[96,97]],12]],[2,[1]]]],[[[100,[58]],8],57],[[101,8],57],[[101,8],57],[[[98,[[0,[96,97,58]],[0,[12,58]]]],8],57],[[]],[[]],[[]],[[]],[[]],[[]],[99,[[100,[99]]]],[[[0,[96,97]],22,12],[[98,[[0,[96,97]],12]]]],[[[100,[99]]],17],[[[98,[[0,[96,97]],12]]],17],[[[100,[99]]],22],[[[98,[[0,[96,97]],12]]],22],[[[98,[[0,[96,97]],12]]],[[10,[3]]]],[101,[[5,[18]]]],[[]],[[],29],[[[100,[99]],[2,[1]]],[[10,[3]]]],[[[98,[[0,[96,97]],12]],[2,[1]]],[[10,[3]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],30],[[],30],[[],30],[[]],[[]],[[]],0,[[]],[[]],[102,102],[[]],[[102,[2,[1]]]],[[102,8],57],[[]],[[]],[[22,22],102],[102,17],[102,22],[[]],[[102,[2,[1]]],[[10,[3]]]],[[],10],[[],10],[[],30],[[]],0,0,0,0,[[]],[[]],[[[0,[63,7]]],5],[[[0,[63,7]]],5],[[[0,[63,7]],24],103],[[[0,[63,7]],24],62],[[[0,[63,7]],2],24],[[[0,[63,7]]],5],[[[0,[63,7]],104],[[10,[86]]]],[[[0,[63,7]],104],[[10,[86]]]],[[[103,[[0,[58,7]],58]],8],57],[[]],0,[[]],[[]],[[[103,[[0,[[105,[24]],7]]]]],24],[[[103,[[0,[[105,[24]],7]]]]],5],[[[0,[63,7]],24]],[[[0,[63,7]]]],[[[103,[[0,[[105,[24]],7]]]]]],[[],10],[[],10],[[],30],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[106,106],[107,107],[[]],[[]],[[106,106],14],[[106,8],57],[[108,8],57],[[107,8],57],[[[62,[17]]],106],[[[62,[24]]],106],[[]],[[]],[[]],[[106,24],24],[[]],[[]],[[]],[106,107],[[]],[[]],[106,[[62,[24]]]],[106,14],[106,108],[106,24],[108,[[5,[24]]]],[107,5],[[[0,[63,7]],24,24],106],[108],[107],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],30],[[],30],[[],30],[[]],[[]],[[]]],"c":[56,57,58,59,60,63,64,65,66,68,69,72,73,75,76,77,79,80,81,711],"p":[[15,"u8"],[15,"slice"],[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[8,"AsByteSliceMut"],[8,"Sized"],[3,"Formatter"],[3,"Error"],[4,"Result"],[3,"Error"],[8,"RngCore"],[15,"f64"],[15,"bool"],[8,"SampleUniform"],[8,"SampleBorrow"],[15,"u32"],[8,"Error"],[3,"Global"],[3,"Box"],[8,"Into"],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error"],[8,"Distribution"],[3,"DistIter"],[3,"ThreadRng"],[3,"String"],[3,"TypeId"],[3,"Bernoulli"],[4,"BernoulliError"],[3,"Binomial"],[3,"Cauchy"],[3,"Dirichlet"],[3,"Exp1"],[3,"Exp"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Pareto"],[3,"Poisson"],[3,"Triangular"],[8,"Clone"],[3,"Uniform"],[3,"UnitCircle"],[3,"UnitSphereSurface"],[3,"Weibull"],[3,"OpenClosed01"],[3,"Open01"],[3,"Standard"],[6,"Result"],[8,"Debug"],[3,"Alphanumeric"],[3,"RangeInclusive"],[3,"Range"],[3,"Vec"],[8,"Rng"],[15,"array"],[15,"f32"],[15,"char"],[3,"NonZeroU128"],[15,"u16"],[3,"NonZeroU16"],[15,"isize"],[15,"i16"],[3,"NonZeroU64"],[15,"i128"],[3,"NonZeroUsize"],[15,"i8"],[3,"NonZeroU8"],[3,"Wrapping"],[15,"i64"],[15,"u128"],[3,"UniformInt"],[3,"UniformFloat"],[3,"UniformDuration"],[3,"Duration"],[8,"PartialOrd"],[3,"WeightedIndex"],[4,"WeightedError"],[8,"IntoIterator"],[8,"AddAssign"],[8,"Default"],[8,"SubAssign"],[8,"Weight"],[3,"WeightedIndex"],[3,"OsRng"],[3,"StdRng"],[3,"EntropyRng"],[8,"BlockRngCore"],[8,"SeedableRng"],[3,"ReseedingRng"],[8,"Read"],[3,"ReadRng"],[3,"ReadError"],[3,"StepRng"],[3,"SliceChooseIter"],[8,"Fn"],[8,"Index"],[4,"IndexVec"],[4,"IndexVecIntoIter"],[4,"IndexVecIter"],[8,"UniformSampler"],[8,"SliceRandom"],[8,"IteratorRandom"]]},\
"rand_chacha":{"doc":"The ChaCha random number generator.","t":"DDDDDDGGLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["ChaCha12Core","ChaCha12Rng","ChaCha20Core","ChaCha20Rng","ChaCha8Core","ChaCha8Rng","ChaChaCore","ChaChaRng","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","fill_bytes","fill_bytes","fill_bytes","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_seed","from_seed","from_seed","from_seed","from_seed","from_seed","generate","generate","generate","get_word_pos","get_word_pos","get_word_pos","into","into","into","into","into","into","next_u32","next_u32","next_u32","next_u64","next_u64","next_u64","rand_core","set_stream","set_stream","set_stream","set_word_pos","set_word_pos","set_word_pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_fill_bytes","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip"],"q":[[0,"rand_chacha"]],"d":["ChaCha with 12 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds","A cryptographically secure random number generator that …","ChaCha with 8 rounds","A cryptographically secure random number generator that …","ChaCha with 20 rounds, low-level interface","ChaCha with 20 rounds","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Get the offset from the start of the stream, in 32-bit …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Set the stream number.","Set the stream number.","Set the stream number.","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","Set the offset from the start of the stream, in 32-bit …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,2,3,4,4,5,6,6,1,2,3,4,5,6,1,3,5,2,4,6,1,2,3,4,5,6,2,4,6,2,4,6,0,2,4,6,2,4,6,1,2,3,4,5,6,2,4,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[2,[8,[7]]]],[[4,[8,[7]]]],[[6,[8,[7]]]],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[]],[1,2],[[]],[[]],[[]],[3,4],[[]],[[]],[5,6],[[],1],[[],2],[[],3],[[],4],[[],5],[[],6],[1],[3],[5],[2,11],[4,11],[6,11],[[]],[[]],[[]],[[]],[[]],[[]],[2,12],[4,12],[6,12],[2,13],[4,13],[6,13],0,[[2,13]],[[4,13]],[[6,13]],[[2,11]],[[4,11]],[[6,11]],[[]],[[]],[[]],[[]],[[]],[[]],[[2,[8,[7]]],[[15,[14]]]],[[4,[8,[7]]],[[15,[14]]]],[[6,[8,[7]]],[[15,[14]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[]],[[]]],"c":[],"p":[[3,"ChaCha20Core"],[3,"ChaCha20Rng"],[3,"ChaCha12Core"],[3,"ChaCha12Rng"],[3,"ChaCha8Core"],[3,"ChaCha8Rng"],[15,"u8"],[15,"slice"],[3,"Formatter"],[6,"Result"],[15,"u128"],[15,"u32"],[15,"u64"],[3,"Error"],[4,"Result"],[3,"TypeId"]]},\
"rand_core":{"doc":"Random number generation traits","t":"SIDSDIQIALLLLLLLLKLLLLLLLLLLKALLLALKLKLLLLLLLLKLLLLLLLDDIQQLLLLLLLLMMLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFF","n":["CUSTOM_START","CryptoRng","Error","INTERNAL_START","OsRng","RngCore","Seed","SeedableRng","block","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","code","default","fill_bytes","fill_bytes","fmt","fmt","fmt","from","from","from","from","from_entropy","from_rng","from_seed","impls","inner","into","into","le","new","next_u32","next_u32","next_u64","next_u64","raw_os_error","read","seed_from_u64","source","take_inner","to_owned","to_string","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","BlockRng","BlockRng64","BlockRngCore","Item","Results","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","core","core","fill_bytes","fill_bytes","fmt","fmt","from","from","from_rng","from_rng","from_seed","from_seed","generate","generate_and_set","generate_and_set","index","index","into","into","new","new","next_u32","next_u32","next_u64","next_u64","reset","reset","seed_from_u64","seed_from_u64","to_owned","to_owned","try_fill_bytes","try_fill_bytes","try_from","try_from","try_into","try_into","type_id","type_id","fill_bytes_via_next","fill_via_u32_chunks","fill_via_u64_chunks","next_u32_via_fill","next_u64_via_fill","next_u64_via_u32","read_u32_into","read_u64_into"],"q":[[0,"rand_core"],[54,"rand_core::block"],[106,"rand_core::impls"],[112,"rand_core::le"]],"d":["Codes at or above this point can be used by users to …","A marker trait used to indicate that an <code>RngCore</code> or …","Error type of random number generators","Codes below this point represent OS Errors (i.e. positive …","A random number generator that retrieves randomness from …","The core of a random number generator.","Seed type, which is restricted to types …","A random number generator that can be explicitly seeded.","The <code>BlockRngCore</code> trait and implementation helpers","","","","","","","Retrieve the error code, if any.","","Fill <code>dest</code> with random data.","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new instance of the RNG seeded via <code>getrandom</code>.","Create a new PRNG seeded from another <code>Rng</code>.","Create a new PRNG using the given seed.","Helper functions for implementing <code>RngCore</code> functions.","Reference the inner error (<code>std</code> only)","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Little-Endian utilities","Construct from any type supporting <code>std::error::Error</code>","Return the next random <code>u32</code>.","","Return the next random <code>u64</code>.","","Extract the raw OS error code (if this error came from the …","","Create a new PRNG using a <code>u64</code> seed.","","Unwrap the inner error (<code>std</code> only)","","","Fill <code>dest</code> entirely with random data.","","","","","","","","A wrapper type implementing <code>RngCore</code> for some type …","A wrapper type implementing <code>RngCore</code> for some type …","A trait for RNGs which do not generate random numbers …","Results element type, e.g. <code>u32</code>.","Results type. This is the ‘block’ an RNG implementing …","","","","","","","","","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","The <em>core</em> part of the RNG, implementing the <code>generate</code> …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Generate a new block of results.","Generate a new set of results immediately, setting the …","Generate a new set of results immediately, setting the …","Get the index into the result buffer.","Get the index into the result buffer.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>BlockRng</code> from an existing RNG implementing …","Create a new <code>BlockRng</code> from an existing RNG implementing …","","","","","Reset the number of available results. This will force a …","Reset the number of available results. This will force a …","","","","","","","","","","","","","Implement <code>fill_bytes</code> via <code>next_u64</code> and <code>next_u32</code>, …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>fill_bytes</code> by reading chunks from the output …","Implement <code>next_u32</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>fill_bytes</code>, little-endian order.","Implement <code>next_u64</code> via <code>next_u32</code>, little-endian order.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>. Borrowed …","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>. Borrowed …"],"i":[2,0,0,2,0,0,28,0,0,2,1,2,1,1,1,2,1,10,1,2,2,1,2,2,2,1,28,28,28,0,2,2,1,0,2,10,1,10,1,2,10,28,2,2,1,2,10,1,2,1,2,1,2,1,0,0,0,23,23,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,23,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,25,26,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[[]],[2,[[4,[3]]]],[[],1],[[[6,[5]]]],[[1,[6,[5]]]],[[2,7],8],[[2,7],8],[[1,7],8],[9,2],[3,2],[[]],[[]],[[]],[10,[[11,[2]]]],[[]],0,[2,12],[[]],[[]],0,[[[14,[[13,[12]]]]],2],[[],15],[1,15],[[],16],[1,16],[2,[[4,[17]]]],[[10,[6,[5]]],[[11,[18,19]]]],[16],[2,[[4,[12]]]],[2,[[13,[12]]]],[[]],[[],20],[[[6,[5]]],[[11,[2]]]],[[1,[6,[5]]],[[11,[2]]]],[[],11],[[],11],[[],11],[[],11],[[],21],[[],21],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[25,[[0,[22,23,24]]]]],[[25,[[0,[22,23,24]]]]]],[[[26,[[0,[22,23,24]]]]],[[26,[[0,[22,23,24]]]]]],[[]],[[]],0,0,[[[25,[23]],[6,[5]]]],[[[26,[23]],[6,[5]]]],[[[25,[[0,[23,27]]]],7],8],[[[26,[[0,[23,27]]]],7],8],[[]],[[]],[10,[[11,[[25,[[0,[23,28]]]],2]]]],[10,[[11,[[26,[[0,[23,28]]]],2]]]],[[],[[25,[[0,[23,28]]]]]],[[],[[26,[[0,[23,28]]]]]],[[]],[[[25,[23]],18]],[[[26,[23]],18]],[[[25,[23]]],18],[[[26,[23]]],18],[[]],[[]],[23,[[25,[23]]]],[23,[[26,[23]]]],[[[25,[23]]],15],[[[26,[23]]],15],[[[25,[23]]],16],[[[26,[23]]],16],[[[25,[23]]]],[[[26,[23]]]],[16,[[25,[[0,[23,28]]]]]],[16,[[26,[[0,[23,28]]]]]],[[]],[[]],[[[25,[23]],[6,[5]]],[[11,[2]]]],[[[26,[23]],[6,[5]]],[[11,[2]]]],[[],11],[[],11],[[],11],[[],11],[[],21],[[],21],[[[0,[10,24]],[6,[5]]]],[[[6,[15]],[6,[5]]]],[[[6,[16]],[6,[5]]]],[[[0,[10,24]]],15],[[[0,[10,24]]],16],[[[0,[10,24]]],16],[[[6,[5]],[6,[15]]]],[[[6,[5]],[6,[16]]]]],"c":[],"p":[[3,"OsRng"],[3,"Error"],[3,"NonZeroU32"],[4,"Option"],[15,"u8"],[15,"slice"],[3,"Formatter"],[6,"Result"],[3,"Error"],[8,"RngCore"],[4,"Result"],[8,"Error"],[3,"Box"],[8,"Into"],[15,"u32"],[15,"u64"],[15,"i32"],[15,"usize"],[3,"Error"],[3,"String"],[3,"TypeId"],[8,"Clone"],[8,"BlockRngCore"],[8,"Sized"],[3,"BlockRng"],[3,"BlockRng64"],[8,"Debug"],[8,"SeedableRng"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
